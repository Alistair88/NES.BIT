{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "NESBITTestFactory-2003190950"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_CreateTermsDriver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreateTerms",
						"type": "ExecuteDataFlow",
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference"
							}
						}
					}
				],
				"folder": {
					"name": "CreateTerms"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IntermediateTermTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PortThesaurusDB",
					"type": "LinkedServiceReference"
				},
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TermID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DimID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TermCode",
						"type": "nvarchar"
					},
					{
						"name": "TermName",
						"type": "nvarchar"
					},
					{
						"name": "Description",
						"type": "nvarchar"
					},
					{
						"name": "Preferred",
						"type": "bit"
					},
					{
						"name": "Available",
						"type": "bit"
					},
					{
						"name": "TermTypeID",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[IntermediateTerm]"
				}
			}
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxonomyTermsInsert')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sink table for the insert branch of  the dataflow",
				"linkedServiceName": {
					"referenceName": "PortThesaurusDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CreateTerms"
				},
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TermID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DimID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TermCode",
						"type": "nvarchar"
					},
					{
						"name": "TermName",
						"type": "nvarchar"
					},
					{
						"name": "Description",
						"type": "nvarchar"
					},
					{
						"name": "Preferred",
						"type": "bit"
					},
					{
						"name": "Available",
						"type": "bit"
					},
					{
						"name": "TermTypeID",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[IntermediateTerm_inc_idendity]"
				}
			}
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CreateTerms')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the Create Terms dataflow and include lookups to the TermTypeTable in the Taxonomy db.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ThesaurusTerms",
								"type": "DatasetReference"
							},
							"name": "ThesaurusTerms",
							"script": "source(output(\n\t\tDimID as integer,\n\t\tDimName as string,\n\t\tRootID as integer,\n\t\tDimPreferred as boolean,\n\t\tDimSourceID as integer,\n\t\tDimDescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table') ~> ThesaurusTerms"
						},
						{
							"dataset": {
								"referenceName": "DestTaxonomyTermsSOURCE",
								"type": "DatasetReference"
							},
							"name": "TaxonomyTerms",
							"script": "source(output(\n\t\tTermID as integer,\n\t\tTermDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tTermDescription as string,\n\t\tTermPreferred as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table') ~> TaxonomyTerms"
						},
						{
							"dataset": {
								"referenceName": "TermTypeSink",
								"type": "DatasetReference"
							},
							"name": "TermTypes",
							"script": "source(output(\n\t\tTermTypeID as integer,\n\t\tTypeName as string,\n\t\tDescription as string,\n\t\tAvailable as boolean,\n\t\tDimTable as string,\n\t\tSourceID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table') ~> TermTypes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TaxonomyTermsInsert",
								"type": "DatasetReference"
							},
							"name": "TaxonomyTermsInsert",
							"script": "SelectForInsertion sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tDimID,\n\t\tTermName,\n\t\tAvailable,\n\t\tTermTypeID\n\t)) ~> TaxonomyTermsInsert"
						},
						{
							"dataset": {
								"referenceName": "TaxonomyTermsInsert",
								"type": "DatasetReference"
							},
							"name": "UpdateTerm",
							"script": "ConditionsForUpdate sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermID'],\n\tmapColumn(\n\t\tTermID,\n\t\tTermName = DimName,\n\t\tDescription = DimDescription,\n\t\tPreferred = DimPreferred\n\t)) ~> UpdateTerm"
						},
						{
							"dataset": {
								"referenceName": "TaxonomyTermsInsert",
								"type": "DatasetReference"
							},
							"name": "DeleteSink",
							"script": "SelectForDelete sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermID'],\n\tmapColumn(\n\t\tTermID,\n\t\tAvailable\n\t)) ~> DeleteSink"
						}
					],
					"transformations": [
						{
							"name": "MergeJoin",
							"script": "SelectFromLookup, TaxonomyTerms join(DimID == TermDimID,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> MergeJoin"
						},
						{
							"name": "ConditionalSplit",
							"script": "MergeJoin split(isNull(TermID),\n\tisNull(DimID),\n\tdisjoint: false) ~> ConditionalSplit@(Insert, Delete, Update)"
						},
						{
							"name": "SetAvailable",
							"script": "ConditionalSplit@Insert derive(Available = true()) ~> SetAvailable"
						},
						{
							"name": "ConvertRootToTypeID",
							"script": "SetAvailable derive(RootTypeID = toShort(RootID)) ~> ConvertRootToTypeID"
						},
						{
							"name": "ConvertDimIDToTypeID",
							"script": "ThesaurusTerms derive(PossibleTypeID = toShort(DimID)) ~> ConvertDimIDToTypeID"
						},
						{
							"name": "ConvertNameAndDesc",
							"script": "ConditionalSplit@Update derive(DimTypeName = left(DimName, 80),\n\t\tDimTypeDescription = left(DimDescription, 500)) ~> ConvertNameAndDesc"
						},
						{
							"name": "ConditionsForInsertion",
							"script": "LookupTypeWithRootID alterRow(insertIf(not(isNull(TermTypes@TermTypeID)))) ~> ConditionsForInsertion"
						},
						{
							"name": "SelectForInsertion",
							"script": "Filter2 select(mapColumn(\n\t\tDimID,\n\t\tDimPreferred,\n\t\tTermName = DimName,\n\t\tTermTypeID = RootTypeID,\n\t\tAvailable = SetAvailable@Available\n\t))~> SelectForInsertion"
						},
						{
							"name": "ConditionsForDelete",
							"script": "ConditionalSplit@Delete alterRow(updateIf(isNull(DimID))) ~> ConditionsForDelete"
						},
						{
							"name": "DerivedColumn1",
							"script": "ConditionsForDelete derive(Available = false()) ~> DerivedColumn1"
						},
						{
							"name": "SelectForDelete",
							"script": "DerivedColumn1 select(mapColumn(\n\t\tTermID,\n\t\tAvailable\n\t))~> SelectForDelete"
						},
						{
							"name": "LookupTypesWithDimID",
							"script": "ConvertDimIDToTypeID, TermTypes lookup(DimName == TypeName\n\t&& DimSourceID == SourceID\n\t&& PossibleTypeID == TermTypeID,\n\tbroadcast: 'none')~> LookupTypesWithDimID"
						},
						{
							"name": "SelectFromLookup",
							"script": "LookupTypesWithDimID select(mapColumn(\n\t\tDimID,\n\t\tDimName,\n\t\tRootID,\n\t\tDimPreferred,\n\t\tDimSourceID,\n\t\tDimDescription,\n\t\tPossibleTypeID\n\t))~> SelectFromLookup"
						},
						{
							"name": "LookupTypeWithRootID",
							"script": "ConvertRootToTypeID, TermTypes lookup(RootTypeID == TermTypes@TermTypeID,\n\tbroadcast: 'none')~> LookupTypeWithRootID"
						},
						{
							"name": "ConditionsForUpdate",
							"script": "Filter1 alterRow(updateIf(not(isNull(TermID)))) ~> ConditionsForUpdate"
						},
						{
							"name": "SelectForUpdate",
							"script": "ConvertNameAndDesc select(mapColumn(\n\t\tDimName = DimTypeName,\n\t\tDimPreferred,\n\t\tDimDescription = DimTypeDescription,\n\t\tTermID\n\t))~> SelectForUpdate"
						},
						{
							"name": "Filter1",
							"script": "SelectForUpdate filter(not(isNull(DimName))) ~> Filter1"
						},
						{
							"name": "Filter2",
							"script": "ConditionsForInsertion filter(not(isNull(DimName))) ~> Filter2"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TaxonomyTermsInsert')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PortThesaurusTerms')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TermTable",
								"type": "DatasetReference"
							},
							"name": "GetThesaurusTypes",
							"script": "source(output(\n\t\tDimID as integer,\n\t\tDimName as string,\n\t\tDimDescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table') ~> GetThesaurusTypes"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTermTypes",
								"type": "DatasetReference"
							},
							"name": "GetTaxonomyTermTypes",
							"script": "source(output(\n\t\tTermTypeID as integer,\n\t\tTypeName as string,\n\t\tTypeDescription as string,\n\t\tTypeAvailable as boolean,\n\t\tTypeSourceID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table') ~> GetTaxonomyTermTypes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TermTypeSink",
								"type": "DatasetReference"
							},
							"name": "InsertSink",
							"script": "AssignForInsertion sink(input(\n\t\tTermTypeID as integer,\n\t\tTypeName as string,\n\t\tDescription as string,\n\t\tAvailable as boolean,\n\t\tDimTable as string,\n\t\tSourceID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['TermTypeID'],\n\tmapColumn(\n\t\tTermTypeID,\n\t\tTypeName,\n\t\tDescription = TypeDescription,\n\t\tAvailable = TypeAvailable,\n\t\tSourceID = DimSourceID\n\t)) ~> InsertSink"
						},
						{
							"dataset": {
								"referenceName": "TermTypeSink",
								"type": "DatasetReference"
							},
							"name": "UpdateSink",
							"script": "Filter1 sink(input(\n\t\tTermTypeID as integer,\n\t\tTypeName as string,\n\t\tDescription as string,\n\t\tAvailable as boolean,\n\t\tDimTable as string,\n\t\tSourceID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermTypeID'],\n\tmapColumn(\n\t\tTermTypeID,\n\t\tTypeName,\n\t\tDescription = TypeDescription\n\t),\n\tdateFormat:'dd/MM/yyyy') ~> UpdateSink"
						},
						{
							"dataset": {
								"referenceName": "TermTypeSink",
								"type": "DatasetReference"
							},
							"name": "DeleteSink",
							"script": "TermTypeSoftDelete sink(input(\n\t\tTermTypeID as integer,\n\t\tTypeName as string,\n\t\tDescription as string,\n\t\tAvailable as boolean,\n\t\tDimTable as string,\n\t\tSourceID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermTypeID'],\n\tmapColumn(\n\t\tTermTypeID,\n\t\tTypeName,\n\t\tDescription,\n\t\tAvailable = TypeAvailable,\n\t\tSourceID = TypeSourceID\n\t)) ~> DeleteSink"
						},
						{
							"dataset": {
								"referenceName": "TermSINK",
								"type": "DatasetReference"
							},
							"name": "MarkTermsOfThisTypeAlsoUnavailable",
							"script": "Filter2 sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermTypeID'],\n\tmapColumn(\n\t\tTermTypeID,\n\t\tTermName = TypeName,\n\t\tDescription = TypeDescription,\n\t\tAvailable = TypeAvailable\n\t)) ~> MarkTermsOfThisTypeAlsoUnavailable"
						}
					],
					"transformations": [
						{
							"name": "MergeJoin",
							"script": "GetThesaurusTypes, GetTaxonomyTermTypes join(DimID == TermTypeID,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> MergeJoin"
						},
						{
							"name": "ConditionalSplit1",
							"script": "MergeJoin split(isNull(TermTypeID),\n\tisNull(DimID),\n\tdisjoint: true) ~> ConditionalSplit1@(insert, delete, update)"
						},
						{
							"name": "ConvertDimToType",
							"script": "ConditionalSplit1@insert derive(DimAvailable = true(),\n\t\tDimSourceID = 2,\n\t\tDimTypeName = left(DimName, 80),\n\t\tDimTypeDescription = left(DimDescription, 500)) ~> ConvertDimToType"
						},
						{
							"name": "SelectColumnsToInsert",
							"script": "ConvertDimToType select(mapColumn(\n\t\tTermTypeID = DimID,\n\t\tTypeName = DimTypeName,\n\t\tTypeDescription = DimTypeDescription,\n\t\tTypeAvailable = DimAvailable,\n\t\tDimSourceID\n\t))~> SelectColumnsToInsert"
						},
						{
							"name": "ConvertNameAndDesc",
							"script": "ConditionalSplit1@update derive(DimTypeName = left(DimName, 80),\n\t\tDimTypeDescription = left(DimDescription, 500)) ~> ConvertNameAndDesc"
						},
						{
							"name": "SelectForUpdate",
							"script": "ConditionForUpdate select(mapColumn(\n\t\tTermTypeID,\n\t\tTypeName = DimTypeName,\n\t\tTypeDescription = DimTypeDescription\n\t))~> SelectForUpdate"
						},
						{
							"name": "ConditionForUpdate",
							"script": "ConvertNameAndDesc alterRow(updateIf(not(isNull(TermTypeID)))) ~> ConditionForUpdate"
						},
						{
							"name": "ConditionForDelete",
							"script": "ConditionalSplit1@delete alterRow(updateIf(not(isNull(TermTypeID)))) ~> ConditionForDelete"
						},
						{
							"name": "TermTypeSoftDelete",
							"script": "SelectValueToModify select(mapColumn(\n\t\tTermTypeID,\n\t\tTypeName,\n\t\tTypeAvailable,\n\t\tTypeSourceID,\n\t\tDescription = TypeDescription\n\t))~> TermTypeSoftDelete"
						},
						{
							"name": "SelectValueToModify",
							"script": "ConditionForDelete derive(TypeAvailable = TypeAvailable == false()) ~> SelectValueToModify"
						},
						{
							"name": "SoftDeleteTermTable",
							"script": "SelectValueToModify select(mapColumn(\n\t\tTermTypeID,\n\t\tTypeName,\n\t\tTypeDescription,\n\t\tTypeAvailable\n\t))~> SoftDeleteTermTable"
						},
						{
							"name": "AssignForInsertion",
							"script": "SelectColumnsToInsert alterRow(insertIf(not(isNull(TermTypeID)))) ~> AssignForInsertion"
						},
						{
							"name": "Filter1",
							"script": "SelectForUpdate filter(not(isNull(TermTypeID)) && not(isNull(TypeName))) ~> Filter1"
						},
						{
							"name": "Filter2",
							"script": "SoftDeleteTermTable filter(not(isNull(TermTypeID))) ~> Filter2"
						}
					]
				}
			}
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the Create Terms dataflow and include lookups to the TermTypeTable in the Taxonomy db.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ThesaurusTerms",
								"type": "DatasetReference"
							},
							"name": "ThesaurusTerms",
							"script": "source(output(\n\t\tDimID as integer,\n\t\tDimName as string,\n\t\tRootID as integer,\n\t\tDimPreferred as boolean,\n\t\tDimSourceID as integer,\n\t\tDimDescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table') ~> ThesaurusTerms"
						},
						{
							"dataset": {
								"referenceName": "DestTaxonomyTermsSOURCE",
								"type": "DatasetReference"
							},
							"name": "TaxonomyTerms",
							"script": "source(output(\n\t\tTermID as integer,\n\t\tTermDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tTermDescription as string,\n\t\tTermPreferred as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table') ~> TaxonomyTerms"
						},
						{
							"dataset": {
								"referenceName": "TermTypeSink",
								"type": "DatasetReference"
							},
							"name": "TermTypes",
							"script": "source(output(\n\t\tTermTypeID as integer,\n\t\tTypeName as string,\n\t\tDescription as string,\n\t\tAvailable as boolean,\n\t\tDimTable as string,\n\t\tSourceID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table') ~> TermTypes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TaxonomyTermsInsert",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"script": "SelectForInsertion sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tDimID,\n\t\tTermName,\n\t\tPreferred = DimPreferred,\n\t\tAvailable,\n\t\tTermTypeID = RootTypeID\n\t)) ~> sink1"
						}
					],
					"transformations": [
						{
							"name": "ConvertDimIDToTypeID",
							"script": "ThesaurusTerms derive(PossibleTypeID = toShort(DimID)) ~> ConvertDimIDToTypeID"
						},
						{
							"name": "LookupTypesWithDimID",
							"script": "ConvertDimIDToTypeID, TermTypes join(DimName == TypeName\n\t&& DimSourceID == SourceID\n\t&& PossibleTypeID == TermTypeID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> LookupTypesWithDimID"
						},
						{
							"name": "MergeJoin",
							"script": "Select1, TaxonomyTerms join(DimID == TermDimID,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> MergeJoin"
						},
						{
							"name": "ConditionalSplit1",
							"script": "MergeJoin split(isNull(TermID),\n\tdisjoint: false) ~> ConditionalSplit1@(Insert, Default)"
						},
						{
							"name": "SetAvailable",
							"script": "ConditionalSplit1@Insert derive(Available = true()) ~> SetAvailable"
						},
						{
							"name": "ConvertRootToTypeID",
							"script": "SetAvailable derive(RootTypeID = toShort(RootID)) ~> ConvertRootToTypeID"
						},
						{
							"name": "Join3",
							"script": "DerivedColumn1, TermTypes join(RootID == TermTypes@TermTypeID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join3"
						},
						{
							"name": "Select1",
							"script": "LookupTypesWithDimID select(mapColumn(\n\t\tDimID,\n\t\tRootID,\n\t\tDimPreferred,\n\t\tDimDescription,\n\t\tTermTypeID = PossibleTypeID,\n\t\tTypeName,\n\t\tSourceID\n\t))~> Select1"
						},
						{
							"name": "ConditionsForInsertion",
							"script": "Join3 alterRow(insertIf(not(isNull(RootTypeID)))) ~> ConditionsForInsertion"
						},
						{
							"name": "Filter1",
							"script": "ConditionsForInsertion filter(isNull(TermPreferred)) ~> Filter1"
						},
						{
							"name": "SelectForInsertion",
							"script": "Filter1 select(mapColumn(\n\t\tDimID,\n\t\tDimPreferred,\n\t\tTermName,\n\t\tRootTypeID,\n\t\tAvailable = TermTypes@Available\n\t))~> SelectForInsertion"
						},
						{
							"name": "DerivedColumn1",
							"script": "ConvertRootToTypeID derive(TermID = 9999) ~> DerivedColumn1"
						}
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TaxonomyTermsInsert')]"
			]
		}
	]
}