{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "NESBITTestFactory-2003190950"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MergePotfolioDimsDriver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_MergePortfolioDimensions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_MergePortfolioDimensions",
								"type": "DataFlowReference"
							}
						}
					}
				],
				"folder": {
					"name": "MergePortfolioDimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_MergePortfolioDimensions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MergeTurasDimensionsDriver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Run_MergeTurasDimensions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_MergeTurasDimensions",
								"type": "DataFlowReference"
							}
						}
					}
				],
				"folder": {
					"name": "MergeTurasDimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_MergeTurasDimensions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunCreateRelationships')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Run CreateRelationships dataflow\n",
				"activities": [
					{
						"name": "df_CreateRelationships",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Executepl_CreateTermRelationshipsSource",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ExecutePl_CopyFromLocalToRelation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CreateRelationships",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "Executepl_CreateTermRelationshipsSource",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CreateTermRelationshipsSource",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecutePl_CopyFromLocalToRelation",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyFromLocalToRelation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"folder": {
					"name": "RunAllDataflows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CreateRelationships')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunCreateTerms')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Run all PortThesaurus dataflows",
				"activities": [
					{
						"name": "df_CreateTerms",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteCreateTaxonomyTermsSource",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ExecuteCreateThesaurus_Dim_Source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CreateTerms",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "ExecuteCreateTaxonomyTermsSource",
						"description": "Create the Taxonomy terms source tab using a query.",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CreateTaxonomyTermsSource",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecuteCreateThesaurus_Dim_Source",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CreateThesaurusTerms_Dim_Source",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"folder": {
					"name": "RunAllDataflows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CreateTerms')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunMergePortfolioDimensions-old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_MergePortfolioDimensions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_MergePortfolioDimensions",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "UpsertToTermTable",
						"description": "Pipeline to upsert to the term table in the PortThesaurus DB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "df_MergePortfolioDimensions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterStoredProcedureName": "[[dbo].[spUpsertTerm]",
								"sqlWriterTableType": "Term"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TermID",
											"type": "Int32"
										},
										"sink": {
											"name": "TermID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DimID",
											"type": "Int32"
										},
										"sink": {
											"name": "DimID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TermCode",
											"type": "String"
										},
										"sink": {
											"name": "TermCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TermName",
											"type": "String"
										},
										"sink": {
											"name": "TermName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Description",
											"type": "String"
										},
										"sink": {
											"name": "Description",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Preferred",
											"type": "Boolean"
										},
										"sink": {
											"name": "Preferred",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "Available",
											"type": "Boolean"
										},
										"sink": {
											"name": "Available",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "TermTypeID",
											"type": "Int16"
										},
										"sink": {
											"name": "TermTypeID",
											"type": "Int16"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "datasetIntermediateTermTable",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationTermTable",
								"type": "DatasetReference"
							}
						]
					}
				],
				"folder": {
					"name": "MergePortfolioDimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_MergePortfolioDimensions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunMergePortfolioDims')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Run all PortThesaurus dataflows",
				"activities": [
					{
						"name": "df_MergePortfolioDimensions",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "UpdatePortfolioDimensions",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ExecuteCreateTaxonomyDimensionTerms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_MergePortfolioDimensions",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "UpdatePortfolioDimensions",
						"description": "Update the Portfolio Dimensions table",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_GetDataFromPortfolioDimensionTables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecuteCreateTaxonomyDimensionTerms",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CreateTaxonomyDimensionTerms",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"folder": {
					"name": "RunAllDataflows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_MergePortfolioDimensions')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CreateTaxonomyDimensionTerms')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunMergeTuras')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Run all PortThesaurus dataflows",
				"activities": [
					{
						"name": "df_MergeTurasDimensions",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecutePl_CreateTurasDimensionTables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ExecutePl_CreateTaxonomyDimensionTerms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_MergeTurasDimensions",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "ExecutePl_CreateTurasDimensionTables",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CreateTurasDimensionTables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecutePl_CreateTaxonomyDimensionTerms",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CreateTaxonomyDimensionTerms",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"folder": {
					"name": "RunAllDataflows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_MergeTurasDimensions')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CreateTaxonomyDimensionTerms')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunPortThesaurus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Run PortThesaurus dataflows",
				"activities": [
					{
						"name": "df_PortThesaurusTerms",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateTermTable",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LocalToDboTermType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PortThesaurusTerms",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "LocalToDboTermType",
						"description": "Create the TermType table on the Azure DB using a query.",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_LocalToTermTypeSource",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "CreateTermTable",
						"description": "Create the term table using a query.",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_LocalToTermSource",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"folder": {
					"name": "RunAllDataflows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PortThesaurusTerms')]",
				"[concat(variables('factoryId'), '/pipelines/pl_LocalToTermTypeSource')]",
				"[concat(variables('factoryId'), '/pipelines/pl_LocalToTermSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TruncateIntermediateTerm')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This activity truncates the Intermediate Term table.",
				"activities": [
					{
						"name": "TruncateIntermediateTerm",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "[[dbo].[IntermediateTerm]"
							},
							{
								"name": "Destination",
								"value": "[[dbo].[IntermediateTerm]"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"sink": {
								"type": "AzureSqlSink",
								"sqlWriterCleanupScript": "TRUNCATE TABLE  IntermediateTerm"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "IntermediateTermTable",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "IntermediateTermTable",
								"type": "DatasetReference"
							}
						]
					}
				],
				"folder": {
					"name": "TruncateTable"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/IntermediateTermTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TruncatePortThesaurusTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Truncate the tables in the PortThesaurus db used in the dataflow",
				"activities": [
					{
						"name": "LookupTableList",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"dataset": {
								"referenceName": "PortThesaurusTableList",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupTableList').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "TruncatePortThesaurusTables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[TruncatePortThesaurusTables]",
										"storedProcedureParameters": {
											"databaseName": {
												"value": {
													"value": "@item().databaseName",
													"type": "Expression"
												},
												"type": "String"
											},
											"tableName": {
												"value": {
													"value": "@item().tableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PortThesaurusDB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"folder": {
					"name": "TruncateTable"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PortThesaurusTableList')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TruncateTables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupTableList",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"dataset": {
								"referenceName": "DataFactoryTableList",
								"type": "DatasetReference"
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupTableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupTableList').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SqlServerStoredProcedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[TruncateTable]",
										"storedProcedureParameters": {
											"databaseName": {
												"value": {
													"value": "@item().databaseName",
													"type": "Expression"
												},
												"type": "String"
											},
											"tableName": {
												"value": {
													"value": "@item().tableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "WarehouseAlphaTest",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"folder": {
					"name": "TruncateTable"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFactoryTableList')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"TableName": "TableName"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sqlSourceDataset",
								"type": "DatasetReference",
								"parameters": {
									"SqlTableName": "dbo.TermTypeSOURCE"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sqlSinkDataSet",
								"type": "DatasetReference",
								"parameters": {
									"SqlTableName": "dbo.TermTypeSOURCE"
								}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqlSourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/sqlSinkDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CreateTaxonomyDimensionTerms')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreateTaxonomyDimensionTerms",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT RTRIM(CAST(TermType.DimTable AS NVARCHAR(80))) TermDimTable,\n       Term.TermID,\n       CAST(Term.DimID AS BIGINT) TermDimID,\n       Term.TermCode,\n       Term.TermName,\n       Term.Description AS TermDescription,\n       Term.Preferred AS TermPreferred,\n       Term.Available AS TermAvailable,\n       Term.TermTypeID\nFROM [dbo].[IntermediateTerm] Term\n    LEFT OUTER JOIN [dbo].[IntermediateTermType] TermType\n        ON TermType.TermTypeID = Term.TermTypeID\nWHERE TermType.SourceID = 1\nORDER BY TermType.DimTable,\n         Term.DimID;"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TermDimTable",
											"type": "String"
										},
										"sink": {
											"name": "TermDimTable",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TermID",
											"type": "Int32"
										},
										"sink": {
											"name": "TermID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TermDimID",
											"type": "Int64"
										},
										"sink": {
											"name": "TermDimID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "TermCode",
											"type": "String"
										},
										"sink": {
											"name": "TermCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TermName",
											"type": "String"
										},
										"sink": {
											"name": "TermName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TermDescription",
											"type": "String"
										},
										"sink": {
											"name": "TermDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TermPreferred",
											"type": "Boolean"
										},
										"sink": {
											"name": "TermPreferred",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "TermAvailable",
											"type": "Boolean"
										},
										"sink": {
											"name": "TermAvailable",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "TermTypeID",
											"type": "Int16"
										},
										"sink": {
											"name": "TermTypeID",
											"type": "Int16"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "TaxonomyTermTable",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "TaxonomyDimensionTerms",
								"type": "DatasetReference"
							}
						]
					}
				],
				"folder": {
					"name": "MergeTurasDimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TaxonomyDimensionTerms')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CreateTermsDriver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreateTerms",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CreateTerms",
								"type": "DataFlowReference"
							}
						}
					}
				],
				"folder": {
					"name": "CreateTerms"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CreateTerms')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LocalToTermSource')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy the term table from local host to an Azure DB",
				"activities": [
					{
						"name": "LocalToTermSource",
						"description": "Copy from local machine to TermSOURCE table  in the ADFTesting DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "Select \n\t\tDISTINCT CAST(T.ID AS SMALLINT) DimID, \n\t\tCAST(T.name AS NVARCHAR(200)) DimName, \n\t\tCAST(T.scope + ' ' + T.additionalnotes AS NVARCHAR(2000)) DimDescription \nFROM \n\t\tdbo.Term T\n  LEFT OUTER JOIN \n\t\tdbo.Relation RB on RB.maintermid = T.id AND RB.Relationship =3\n  LEFT OUTER JOIN \n\t\tdbo.Relation RN on RN.maintermid = T.id AND RN.Relationship =4\n  WHERE \n\t\tRB.id IS NULL AND RN.id IS NOT NULL\n  ORDER BY \n\t\tDimID"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"DimID": "DimID",
									"DimName": "DimName",
									"DimDescription": "DimDescription"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Localhost",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "ADFTestingTermTableDELME",
								"type": "DatasetReference"
							}
						]
					}
				],
				"folder": {
					"name": "PortThesaurus"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADFTestingTermTableDELME')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_LocalToTermTypeSource')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy the contents of the TermType table on the local db to the TermTypeSource table on Azure. ",
				"activities": [
					{
						"name": "CopyLocalToTermTypeSource",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "[[dbo].[TermTypeSOURCE]"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TermTypeID, TypeName, Description TypeDescription, Available TypeAvailable, SourceID TypeSourceID FROM dbo.TermType WHERE SourceID = 2"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "TermTypeID",
											"type": "Int16"
										},
										"sink": {
											"name": "TermTypeID",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "TypeName",
											"type": "String"
										},
										"sink": {
											"name": "TypeName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TypeDescription",
											"type": "String"
										},
										"sink": {
											"name": "TypeDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "TypeAvailable",
											"type": "Boolean"
										},
										"sink": {
											"name": "TypeAvailable",
											"type": "Boolean"
										}
									},
									{
										"source": {
											"name": "TypeSourceID",
											"type": "Int16"
										},
										"sink": {
											"name": "TypeSourceID",
											"type": "Int16"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceTermType",
								"type": "DatasetReference"
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationTermTypeSOURCE",
								"type": "DatasetReference"
							}
						]
					}
				],
				"folder": {
					"name": "PortThesaurus"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_RunAllDataflows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Run all PortThesaurus dataflows",
				"activities": [
					{
						"name": "TruncateTables",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "TruncateTables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecRunCreateTerms",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecRunPortThesaurus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RunCreateTerms",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecRunPortThesaurus",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TruncateTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RunPortThesaurus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecMergeTuras",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecRunCreateTerms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RunMergeTuras",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecRunPortfolioDims",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ExecMergeTuras",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RunMergePortfolioDims",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"folder": {
					"name": "RunAllDataflows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/TruncateTables')]",
				"[concat(variables('factoryId'), '/pipelines/RunCreateTerms')]",
				"[concat(variables('factoryId'), '/pipelines/RunPortThesaurus')]",
				"[concat(variables('factoryId'), '/pipelines/RunMergeTuras')]",
				"[concat(variables('factoryId'), '/pipelines/RunMergePortfolioDims')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_RunAllDataflows_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Run all PortThesaurus dataflows",
				"activities": [
					{
						"name": "df_PortThesaurusTerms",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateTermTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PortThesaurusTerms",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "df_CreateTerms",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteCreateTaxonomyTermsSource",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ExecuteCreateThesaurus_Dim_Source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CreateTerms",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "df_CreateRelationships",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Executepl_CreateTermRelationshipsSource",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ExecutePl_CopyFromLocalToRelation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CreateRelationships",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "df_MergeTurasDimensions",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecutePl_CreateTurasDimensionTables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ExecutePl_CreateTaxonomyDimensionTerms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_MergeTurasDimensions",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "df_MergePortfolioDimensions",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "UpdatePortfolioDimensions",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ExecuteCreateTaxonomyDimensionTerms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_MergePortfolioDimensions",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "ExecuteCreateTaxonomyTermsSource",
						"description": "Create the Taxonomy terms source tab using a query.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_PortThesaurusTerms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CreateTaxonomyTermsSource",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "UpdatePortfolioDimensions",
						"description": "Update the Portfolio Dimensions table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_MergeTurasDimensions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_GetDataFromPortfolioDimensionTables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "LocalToDboTermType",
						"description": "Create the TermType table on the Azure DB using a query.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "TruncateTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_LocalToTermTypeSource",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "CreateTermTable",
						"description": "Create the term table using a query.",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LocalToDboTermType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_LocalToTermSource",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Executepl_CreateTermRelationshipsSource",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_CreateTerms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CreateTermRelationshipsSource",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecutePl_CreateTurasDimensionTables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_CreateRelationships",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CreateTurasDimensionTables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecutePl_CreateTaxonomyDimensionTerms",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_CreateRelationships",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CreateTaxonomyDimensionTerms",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecuteCreateTaxonomyDimensionTerms",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_MergeTurasDimensions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CreateTaxonomyDimensionTerms",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecuteCreateThesaurus_Dim_Source",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_PortThesaurusTerms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CreateThesaurusTerms_Dim_Source",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "ExecutePl_CopyFromLocalToRelation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "df_CreateTerms",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_CopyFromLocalToRelation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "TruncateTables",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "TruncateTables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"folder": {
					"name": "RunAllDataflows"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PortThesaurusTerms')]",
				"[concat(variables('factoryId'), '/dataflows/df_CreateTerms')]",
				"[concat(variables('factoryId'), '/dataflows/df_CreateRelationships')]",
				"[concat(variables('factoryId'), '/dataflows/df_MergeTurasDimensions')]",
				"[concat(variables('factoryId'), '/dataflows/df_MergePortfolioDimensions')]",
				"[concat(variables('factoryId'), '/pipelines/pl_LocalToTermTypeSource')]",
				"[concat(variables('factoryId'), '/pipelines/pl_LocalToTermSource')]",
				"[concat(variables('factoryId'), '/pipelines/pl_CreateTaxonomyDimensionTerms')]",
				"[concat(variables('factoryId'), '/pipelines/TruncateTables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADFTestingTermTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Term table used as a sink for Thesaurus data.",
				"linkedServiceName": {
					"referenceName": "WarehouseAlphaTest",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "PortThesaurus"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DimID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DimName",
						"type": "varchar"
					},
					{
						"name": "DimDescription",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[TermSOURCE]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADFTestingTermTableDELME')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Term table used as a sink for Thesaurus data.",
				"linkedServiceName": {
					"referenceName": "WarehouseAlphaTest",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "PortThesaurus"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "DimID",
						"type": "Int32"
					},
					{
						"name": "DimName",
						"type": "String"
					},
					{
						"name": "DimDescription",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[TermSOURCE]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFactoryTableList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WarehouseAlphaTest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[DataFactoryTableList]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IntermediateTermTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PortThesaurusDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TermID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DimID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TermCode",
						"type": "nvarchar"
					},
					{
						"name": "TermName",
						"type": "nvarchar"
					},
					{
						"name": "Description",
						"type": "nvarchar"
					},
					{
						"name": "Preferred",
						"type": "bit"
					},
					{
						"name": "Available",
						"type": "bit"
					},
					{
						"name": "TermTypeID",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[IntermediateTerm]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PortThesaurusTableList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PortThesaurusDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "databaseName",
						"type": "nvarchar"
					},
					{
						"name": "tableName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[PortThesaurusTableList]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxonomyDimensionTerms')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PortThesaurusDB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MergeTurasDimensions"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TermDimTable",
						"type": "nvarchar"
					},
					{
						"name": "TermID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TermDimID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "TermCode",
						"type": "nvarchar"
					},
					{
						"name": "TermName",
						"type": "nvarchar"
					},
					{
						"name": "TermDescription",
						"type": "nvarchar"
					},
					{
						"name": "TermPreferred",
						"type": "bit"
					},
					{
						"name": "TermAvailable",
						"type": "bit"
					},
					{
						"name": "TermTypeID",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[TaxonomyDimensionTerms]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TaxonomyTerms')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PortThesaurusDB",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TermID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TermDimID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TermCode",
						"type": "nvarchar"
					},
					{
						"name": "TermName",
						"type": "nvarchar"
					},
					{
						"name": "TermDescription",
						"type": "nvarchar"
					},
					{
						"name": "TermPreferred",
						"type": "bit"
					},
					{
						"name": "Available",
						"type": "bit"
					},
					{
						"name": "TermTypeID",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[TaxonomyTermSOURCE]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlSinkDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WarehouseAlphaTest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SqlTableName": {
						"type": "String",
						"defaultValue": "dbo.TermTypeSOURCE"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "TableName"
					}
				],
				"typeProperties": {
					"tableName": {
						"value": "@dataset().SqlTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlSourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WarehouseAlphaTest",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SqlTableName": {
						"type": "String",
						"defaultValue": "dbo.TermTypeSOURCE"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"structure": [
					{
						"name": "TableName",
						"type": "String"
					}
				],
				"typeProperties": {
					"tableName": "@dataset().SqlTableName"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PortDimsUpdateBranchTesting')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "MergePortfolioDims"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PortfolioDimensionTables",
								"type": "DatasetReference"
							},
							"name": "PortfolioDimensionTables"
						},
						{
							"dataset": {
								"referenceName": "TaxonomyDimensionTerms",
								"type": "DatasetReference"
							},
							"name": "TaxonomyDimensionTerms"
						},
						{
							"dataset": {
								"referenceName": "CreateTurasDimsLookup",
								"type": "DatasetReference"
							},
							"name": "LookupType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "IntermediateTermTable",
								"type": "DatasetReference"
							},
							"name": "UpdateSink"
						}
					],
					"script": "\n\nsource(output(\n\t\tDimTableName as string,\n\t\tDimID as integer,\n\t\tDimCode as string,\n\t\tDimName as string,\n\t\tDimDescription as string,\n\t\tDimActive as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PortfolioDimensionTables\nsource(output(\n\t\tTermDimTable as string,\n\t\tTermID as integer,\n\t\tTermDimID as long,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tTermDescription as string,\n\t\tTermPreferred as boolean,\n\t\tTermAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TaxonomyDimensionTerms\nsource(output(\n\t\tTermTypeID as integer,\n\t\tDimTable as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LookupType\nPortfolioDimensionTables, TaxonomyDimensionTerms join(DimID == TermDimID\n\t&& DimTableName == TermDimTable,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> MergeJoin\nFilter1 split(not(isNull(TermID)),\n\tdisjoint: true) ~> ConditionalSplit@(Update, Default)\nConditionalSplit@Update select(mapColumn(\n\t\tDimID,\n\t\tTermID,\n\t\tTermCode,\n\t\tTermName,\n\t\tTermDescription,\n\t\tTermPreferred,\n\t\tTermAvailable,\n\t\tTermTypeID\n\t)) ~> SelectForUpdate\nSelectForUpdate alterRow(updateIf(not(isNull(TermID)))) ~> MarkForUpdate\nMergeJoin filter(DimID == 4303) ~> Filter1\nMarkForUpdate sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermID'],\n\tmapColumn(\n\t\tTermID,\n\t\tDimID,\n\t\tTermCode,\n\t\tTermName,\n\t\tDescription = TermDescription,\n\t\tPreferred = TermPreferred,\n\t\tAvailable = TermAvailable,\n\t\tTermTypeID\n\t)) ~> UpdateSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TaxonomyDimensionTerms')]",
				"[concat(variables('factoryId'), '/datasets/IntermediateTermTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CreateRelationships')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GetDimRelationship",
								"type": "DatasetReference"
							},
							"name": "GetDimRelationship"
						},
						{
							"dataset": {
								"referenceName": "TermRelationship",
								"type": "DatasetReference"
							},
							"name": "TermRelationships"
						},
						{
							"dataset": {
								"referenceName": "ds_CreateLookupTable",
								"type": "DatasetReference"
							},
							"name": "LookupTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TermRelationshipSink",
								"type": "DatasetReference"
							},
							"name": "InsertRelationship"
						},
						{
							"dataset": {
								"referenceName": "TermRelationshipSink",
								"type": "DatasetReference"
							},
							"name": "DeleteRelationship"
						}
					],
					"script": "\n\nsource(output(\n\t\tXDimID as integer,\n\t\tYDimID as integer,\n\t\tDimKindID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> GetDimRelationship\nsource(output(\n\t\tRelationshipID as integer,\n\t\tXTermID as integer,\n\t\tXTermDimID as integer,\n\t\tYTermID as integer,\n\t\tYTermDimID as integer,\n\t\tTermKindID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TermRelationships\nsource(output(\n\t\tTermID as integer,\n\t\tDimID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT Term.TermID, Term.DimID FROM dbo.intermediateTerm Term',\n\tformat: 'query') ~> LookupTable\nGetDimRelationship, TermRelationships join(XDimID == XTermDimID\n\t&& YDimID == YTermDimID\n\t&& DimKindID == TermKindID,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> MergeJoin\nMergeJoin split(isNull(XTermID),\n\tisNull(XDimID),\n\tdisjoint: true) ~> ConditionalSplit@(Insert, Delete, UpdateDoNothing)\nLookupXTerm select(mapColumn(\n\t\tYDimID,\n\t\tDimKindID,\n\t\tRelationshipID,\n\t\tXTermID = TermID,\n\t\tYTermID\n\t)) ~> Select1\nLookupYTerm select(mapColumn(\n\t\tDimKindID,\n\t\tXTermID,\n\t\tYTermID = TermID\n\t)) ~> Select2\nConditionalSplit@Insert, LookupTable join(XDimID == DimID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> LookupXTerm\nSelect1, LookupTable join(YDimID == DimID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> LookupYTerm\nSelect2 alterRow(insertIf(not(isNull(XTermID)))) ~> MarkForInsertion\nConditionalSplit@Delete select(mapColumn(\n\t\tXDimID,\n\t\tDimKindID,\n\t\tRelationshipID,\n\t\tXTermID,\n\t\tYTermID\n\t)) ~> SelectForDeletion\nSelectForDeletion alterRow(deleteIf(isNull(XDimID))) ~> MarkForDeletion\nMarkForInsertion filter(not(isNull(YTermID)) && not(isNull(XTermID))) ~> Filter2\nFilter2 sink(input(\n\t\tRelationshipID as integer,\n\t\tTermXID as integer,\n\t\tTermYID as integer,\n\t\tKindID as integer,\n\t\tDescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tTermXID = XTermID,\n\t\tTermYID = YTermID,\n\t\tKindID = DimKindID\n\t)) ~> InsertRelationship\nMarkForDeletion sink(input(\n\t\tRelationshipID as integer,\n\t\tTermXID as integer,\n\t\tTermYID as integer,\n\t\tKindID as integer,\n\t\tDescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['RelationshipID'],\n\tmapColumn(\n\t\tRelationshipID,\n\t\tTermXID = XTermID,\n\t\tTermYID = YTermID,\n\t\tKindID = DimKindID\n\t)) ~> DeleteRelationship"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CreateTerms')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the Create Terms dataflow and include lookups to the TermTypeTable in the Taxonomy db.",
				"folder": {
					"name": "CreateTerms"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ThesaurusTerms",
								"type": "DatasetReference"
							},
							"name": "ThesaurusTerms"
						},
						{
							"dataset": {
								"referenceName": "TaxonomyTerms",
								"type": "DatasetReference"
							},
							"name": "TaxonomyTerms"
						},
						{
							"dataset": {
								"referenceName": "TermTypeSink",
								"type": "DatasetReference"
							},
							"name": "TermTypes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TaxonomyTermsInsert",
								"type": "DatasetReference"
							},
							"name": "TaxonomyTermsInsert"
						},
						{
							"dataset": {
								"referenceName": "TaxonomyTermsInsert",
								"type": "DatasetReference"
							},
							"name": "DeleteSink"
						},
						{
							"dataset": {
								"referenceName": "TaxonomyTermsInsert",
								"type": "DatasetReference"
							},
							"name": "UpdateTerm"
						}
					],
					"script": "\n\nsource(output(\n\t\tDimID as integer,\n\t\tDimName as string,\n\t\tRootID as integer,\n\t\tDimPreferred as boolean,\n\t\tDimSourceID as integer,\n\t\tDimDescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ThesaurusTerms\nsource(output(\n\t\tTermID as integer,\n\t\tTermDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tTermDescription as string,\n\t\tTermPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TaxonomyTerms\nsource(output(\n\t\tTermTypeID as integer,\n\t\tTypeName as string,\n\t\tDescription as string,\n\t\tAvailable as boolean,\n\t\tDimTable as string,\n\t\tSourceID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TermTypes\nThesaurusTerms derive(PossibleTypeID = toShort(DimID)) ~> ConvertDimIDToTypeID\nConvertDimIDToTypeID, TermTypes join(DimName == TypeName\n\t&& DimSourceID == SourceID\n\t&& PossibleTypeID == TermTypeID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> LookupTypesWithDimID\nSelectFromLookup, TaxonomyTerms join(DimID == TermDimID,\n\tjoinType:'outer',\n\tpartitionBy('roundRobin', 2),\n\tbroadcast: 'none')~> MergeJoin\nSelect1 split(isNull(DimID),\n\tisNull(TermID),\n\tdisjoint: true) ~> ConditionalSplit1@(Delete, Insert, Default)\nConditionsForSoftDelete select(mapColumn(\n\t\tDimPreferred,\n\t\tDimID,\n\t\tTermCode,\n\t\tTermName,\n\t\tTermDescription,\n\t\tTermPreferred,\n\t\tAvailable,\n\t\tTermTypeID\n\t)) ~> SelectForDelete\nConditionalSplit1@Delete derive(Available = false()) ~> AddAvailableCol\nAddAvailableCol alterRow(updateIf(isNull(DimID))) ~> ConditionsForSoftDelete\nConditionalSplit1@Default derive(DimTypeName = left(DimName, 80),\n\t\tDimTypeDescription = left(DimDescription, 500)) ~> ConvertNameAndDesc\nDerivedColumn1 alterRow(updateIf(not(DimName==TermName&&((DimPreferred==TermPreferred)&&(DimDescription==TermDescription))))) ~> ConditionsForUpdate\nConditionsForUpdate select(mapColumn(\n\t\tDimPreferred,\n\t\tDimID,\n\t\tTermCode,\n\t\tTermName,\n\t\tDimDescription,\n\t\tTermPreferred,\n\t\tTermTypeID,\n\t\tTermID,\n\t\tTermDescription,\n\t\tAvailable\n\t)) ~> SelectForUpdate\nConditionalSplit1@Insert derive(Available = true(),\n\t\tRootTypeID = toShort(RootID)) ~> SetAvailable\nSetAvailable, TermTypes join(RootTypeID == TermTypes@TermTypeID,\n\tjoinType:'inner',\n\tpartitionBy('roundRobin', 2),\n\tbroadcast: 'none')~> LookupTypeWithRootID\nLookupTypesWithDimID select(mapColumn(\n\t\tDimID,\n\t\tRootID,\n\t\tDimPreferred,\n\t\tDimDescription,\n\t\tPossibleTypeID,\n\t\tDimName,\n\t\tDimSourceID\n\t)) ~> SelectFromLookup\nLookupTypeWithRootID alterRow(insertIf(not(isNull(DimID)))) ~> ConditionsForInsertion\nConditionsForInsertion select(mapColumn(\n\t\tDimPreferred,\n\t\tDimDescription,\n\t\tDimName,\n\t\tTermCode,\n\t\tAvailable = SetAvailable@Available,\n\t\tTermTypeID = TermTypes@TermTypeID\n\t)) ~> SelectForInsertion\nMergeJoin select(mapColumn(\n\t\tDimID,\n\t\tRootID,\n\t\tDimPreferred,\n\t\tDimDescription,\n\t\tDimName,\n\t\tDimSourceID,\n\t\tTermID,\n\t\tTermDimID,\n\t\tTermCode,\n\t\tTermName,\n\t\tTermDescription,\n\t\tTermPreferred,\n\t\tTermTypeID,\n\t\tAvailable\n\t)) ~> Select1\nConvertNameAndDesc derive(DimPreferred = iif(isNull(DimPreferred), false(), DimPreferred),\n\t\tTermPreferred = iif(isNull(TermPreferred), false(), TermPreferred),\n\t\tDimTypeDescription = iif(isNull(DimTypeDescription), ' ', DimTypeDescription),\n\t\tTermDescription = iif(isNull(TermDescription), ' ', TermDescription)) ~> DerivedColumn1\nSelectForInsertion sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tDimID = TermTypeID,\n\t\tTermCode,\n\t\tTermName = DimName,\n\t\tDescription = DimDescription,\n\t\tPreferred = DimPreferred,\n\t\tAvailable,\n\t\tTermTypeID\n\t)) ~> TaxonomyTermsInsert\nSelectForDelete sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['DimID'],\n\tmapColumn(\n\t\tDimID,\n\t\tTermCode,\n\t\tTermName,\n\t\tDescription = TermDescription,\n\t\tPreferred = DimPreferred,\n\t\tAvailable,\n\t\tTermTypeID\n\t)) ~> DeleteSink\nSelectForUpdate sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermID'],\n\tmapColumn(\n\t\tTermID,\n\t\tDimID,\n\t\tTermCode,\n\t\tTermName,\n\t\tDescription = TermDescription,\n\t\tPreferred = DimPreferred,\n\t\tTermTypeID\n\t)) ~> UpdateTerm"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TaxonomyTerms')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CreateTerms_old')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the Create Terms dataflow and include lookups to the TermTypeTable in the Taxonomy db.",
				"folder": {
					"name": "CreateTerms"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ThesaurusTerms",
								"type": "DatasetReference"
							},
							"name": "ThesaurusTerms"
						},
						{
							"dataset": {
								"referenceName": "TaxonomyTerms",
								"type": "DatasetReference"
							},
							"name": "TaxonomyTerms"
						},
						{
							"dataset": {
								"referenceName": "TermTypeSink",
								"type": "DatasetReference"
							},
							"name": "TermTypes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TaxonomyTermsInsert",
								"type": "DatasetReference"
							},
							"name": "TaxonomyTermsInsert"
						},
						{
							"dataset": {
								"referenceName": "TaxonomyTermsInsert",
								"type": "DatasetReference"
							},
							"name": "DeleteSink"
						},
						{
							"dataset": {
								"referenceName": "TaxonomyTermsInsert",
								"type": "DatasetReference"
							},
							"name": "UpdateTerm"
						}
					],
					"script": "\n\nsource(output(\n\t\tDimID as integer,\n\t\tDimName as string,\n\t\tRootID as integer,\n\t\tDimPreferred as boolean,\n\t\tDimSourceID as integer,\n\t\tDimDescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ThesaurusTerms\nsource(output(\n\t\tTermID as integer,\n\t\tTermDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tTermDescription as string,\n\t\tTermPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TaxonomyTerms\nsource(output(\n\t\tTermTypeID as integer,\n\t\tTypeName as string,\n\t\tDescription as string,\n\t\tAvailable as boolean,\n\t\tDimTable as string,\n\t\tSourceID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TermTypes\nThesaurusTerms derive(PossibleTypeID = toShort(DimID)) ~> ConvertDimIDToTypeID\nConvertDimIDToTypeID, TermTypes join(DimName == TypeName\n\t&& DimSourceID == SourceID\n\t&& PossibleTypeID == TermTypeID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> LookupTypesWithDimID\nSelectFromLookup, TaxonomyTerms join(DimID == TermDimID,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> MergeJoin\nMergeJoin split(isNull(TermID),\n\tisNull(DimID),\n\tnot(isNull(TermID)),\n\tdisjoint: true) ~> ConditionalSplit1@(Insert, Delete, Update, Default)\nConditionalSplit1@Insert derive(Available = true(),\n\t\tRootTypeID = toShort(RootID)) ~> SetAvailable\nSetAvailable, TermTypes join(RootID == TermTypes@TermTypeID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> LookupTypeWithRootID\nLookupTypesWithDimID select(mapColumn(\n\t\tDimID,\n\t\tRootID,\n\t\tDimPreferred,\n\t\tDimDescription,\n\t\tPossibleTypeID,\n\t\tDimName,\n\t\tDimSourceID\n\t)) ~> SelectFromLookup\nLookupTypeWithRootID alterRow(insertIf(not(isNull(DimID)))) ~> ConditionsForInsertion\nConditionsForInsertion select(mapColumn(\n\t\tDimPreferred,\n\t\tDimDescription,\n\t\tPossibleTypeID,\n\t\tDimName,\n\t\tTermCode,\n\t\tAvailable = SetAvailable@Available,\n\t\tTermTypeID = PossibleTypeID\n\t)) ~> SelectForInsertion\nConditionalSplit1@Delete alterRow(updateIf(TermID==286337)) ~> ConditionsForDelete\nDerivedColumn1 select(mapColumn(\n\t\tDimPreferred,\n\t\tDimID = TermDimID,\n\t\tTermCode,\n\t\tTermName,\n\t\tTermDescription,\n\t\tTermPreferred,\n\t\tAvailable,\n\t\tTermTypeID\n\t)) ~> SelectForDelete\nConditionsForDelete derive(Available = false()) ~> DerivedColumn1\nConditionalSplit1@Update derive(DimTypeName = left(DimName, 80),\n\t\tDimTypeDescription = left(DimDescription, 500)) ~> ConvertNameAndDesc\nConvertNameAndDesc alterRow(updateIf(not(isNull(TermID)))) ~> ConditionsForUpdate\nDerivedColumn2 select(mapColumn(\n\t\tDimPreferred,\n\t\tDimID = TermDimID,\n\t\tTermCode,\n\t\tTermName,\n\t\tTermDescription,\n\t\tTermPreferred,\n\t\tAvailable,\n\t\tTermTypeID,\n\t\tTermID\n\t)) ~> SelectForUpdate\nConditionsForUpdate derive(DimTypeName = TermName,\n\t\tDimTypeDescription = DimDescription,\n\t\tDimPreferred = DimPreferred) ~> DerivedColumn2\nSelectForInsertion sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tDimID = TermTypeID,\n\t\tTermCode,\n\t\tTermName = DimName,\n\t\tDescription = DimDescription,\n\t\tPreferred = DimPreferred,\n\t\tAvailable,\n\t\tTermTypeID\n\t)) ~> TaxonomyTermsInsert\nSelectForDelete sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['DimID'],\n\tmapColumn(\n\t\tDimID,\n\t\tTermCode,\n\t\tTermName,\n\t\tDescription = TermDescription,\n\t\tPreferred = DimPreferred,\n\t\tAvailable,\n\t\tTermTypeID\n\t)) ~> DeleteSink\nSelectForUpdate sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermID'],\n\tmapColumn(\n\t\tTermID,\n\t\tDimID,\n\t\tTermCode,\n\t\tTermName,\n\t\tDescription = TermDescription,\n\t\tPreferred = DimPreferred,\n\t\tAvailable,\n\t\tTermTypeID\n\t)) ~> UpdateTerm"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TaxonomyTerms')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DeleteTermRelationships')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "DeleteTermRelationships"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TermRelationshipSink",
								"type": "DatasetReference"
							},
							"name": "TermRelationships"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TermRelationshipSink",
								"type": "DatasetReference"
							},
							"name": "DeleteSink"
						}
					],
					"script": "\n\nsource(output(\n\t\tRelationshipID as integer,\n\t\tTermXID as integer,\n\t\tTermYID as integer,\n\t\tKindID as integer,\n\t\tDescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TermRelationships\nTermRelationships alterRow(deleteIf(not(isNull(TermXID)))) ~> DelIfTermXIDIsNotNull\nDelIfTermXIDIsNotNull alterRow(deleteIf(not(isNull(TermYID)))) ~> DelIfTermYIDIsNull\nDelIfTermYIDIsNull sink(input(\n\t\tRelationshipID as integer,\n\t\tTermXID as integer,\n\t\tTermYID as integer,\n\t\tKindID as integer,\n\t\tDescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['RelationshipID']) ~> DeleteSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_MergePortfolioDimensions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "MergePortfolioDims"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PortfolioDimensionTables",
								"type": "DatasetReference"
							},
							"name": "PortfolioDimensionTables"
						},
						{
							"dataset": {
								"referenceName": "TaxonomyDimensionTerms",
								"type": "DatasetReference"
							},
							"name": "TaxonomyDimensionTerms"
						},
						{
							"dataset": {
								"referenceName": "CreateTurasDimsLookup",
								"type": "DatasetReference"
							},
							"name": "LookupType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "IntermediateTermTable",
								"type": "DatasetReference"
							},
							"name": "SinkIntoTermTaxonomy"
						},
						{
							"dataset": {
								"referenceName": "IntermediateTermTable",
								"type": "DatasetReference"
							},
							"name": "DeleteTerm"
						},
						{
							"dataset": {
								"referenceName": "IntermediateTermTable",
								"type": "DatasetReference"
							},
							"name": "UpdateSink"
						}
					],
					"script": "\n\nsource(output(\n\t\tDimTableName as string,\n\t\tDimID as integer,\n\t\tDimCode as string,\n\t\tDimName as string,\n\t\tDimDescription as string,\n\t\tDimActive as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PortfolioDimensionTables\nsource(output(\n\t\tTermDimTable as string,\n\t\tTermID as integer,\n\t\tTermDimID as long,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tTermDescription as string,\n\t\tTermPreferred as boolean,\n\t\tTermAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TaxonomyDimensionTerms\nsource(output(\n\t\tTermTypeID as integer,\n\t\tDimTable as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LookupType\nPortfolioDimensionTables, TaxonomyDimensionTerms join(DimID == TermDimID\n\t&& DimTableName == TermDimTable,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> MergeJoin\nMergeJoin split(isNull(TermID),\n\tisNull(DimID),\n\tdisjoint: true) ~> ConditionalSplit@(Insert, Delete, Update)\nConditionalSplit@Insert derive(Preferred = true()) ~> DerivedColumn\nDerivedColumn, LookupType lookup(DimTableName == DimTable,\n\tbroadcast: 'none')~> Lookup1\nLookup1 select(mapColumn(\n\t\tDimID,\n\t\tDimCode,\n\t\tDimName,\n\t\tDimDescription,\n\t\tDimActive,\n\t\tTermID,\n\t\tPreferred,\n\t\tTermTypeID_LookUp = LookupType@TermTypeID\n\t)) ~> SelectForInsertion\nConditionalSplit@Delete select(mapColumn(\n\t\tDimID,\n\t\tTermID,\n\t\tTermCode,\n\t\tTermName\n\t)) ~> SelectForDeletion\nSelectForDeletion alterRow(deleteIf(isNull(DimID))) ~> MarkForDeletion\nFilter1 select(mapColumn(\n\t\tDimID,\n\t\tTermID,\n\t\tTermCode,\n\t\tTermName,\n\t\tTermDescription,\n\t\tTermPreferred,\n\t\tTermAvailable,\n\t\tTermTypeID\n\t)) ~> SelectForUpdate\nSelectForUpdate alterRow(updateIf(not(isNull(TermID)))) ~> MarkForUpdate\nSelectForInsertion alterRow(insertIf(not(isNull(TermTypeID_LookUp)))) ~> AlterRow1\nAlterRow1 filter(not(isNull(TermTypeID_LookUp))) ~> RemoveNullTermTypeID\nConditionalSplit@Update derive(DimName = iif(isNull(DimName), ' ', DimName),\n\t\tTermName = iif(isNull(TermName), ' ', TermName),\n\t\tTermDescription = iif(isNull(TermDescription), ' ', TermDescription),\n\t\tDimDescription = iif(isNull(DimDescription), ' ', DimDescription),\n\t\t{ DimActive} = iif(isNull(DimActive), true(), DimActive),\n\t\t{ TermAvailable} = iif(isNull(TermAvailable), true(), TermAvailable),\n\t\tDimCode = iif(isNull(DimCode), ' ', DimCode),\n\t\t{ TermCode} = iif(isNull(TermCode), ' ', TermCode)) ~> DerivedReplaceNullsColumn1\nDerivedReplaceNullsColumn1 filter(not((DimName == TermName) && (TermDescription == DimDescription) && (DimActive == TermAvailable) && (DimCode == TermCode))) ~> Filter1\nRemoveNullTermTypeID sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tDimID,\n\t\tTermCode = DimCode,\n\t\tTermName = DimName,\n\t\tDescription = DimDescription,\n\t\tPreferred,\n\t\tAvailable = DimActive,\n\t\tTermTypeID = TermTypeID_LookUp\n\t)) ~> SinkIntoTermTaxonomy\nMarkForDeletion sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['TermID']) ~> DeleteTerm\nMarkForUpdate sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermID'],\n\tmapColumn(\n\t\tTermID,\n\t\tTermCode,\n\t\tTermName,\n\t\tDescription = TermDescription,\n\t\tAvailable = TermAvailable,\n\t\tDimID,\n\t\tPreferred = TermPreferred,\n\t\tTermTypeID\n\t)) ~> UpdateSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TaxonomyDimensionTerms')]",
				"[concat(variables('factoryId'), '/datasets/IntermediateTermTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_MergeTurasDimensions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "MergeTurasDimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DestinationTurasDimensions",
								"type": "DatasetReference"
							},
							"name": "TurasDimensionTables"
						},
						{
							"dataset": {
								"referenceName": "TaxonomyDimensionTerms",
								"type": "DatasetReference"
							},
							"name": "TaxonomyDimensionTerms"
						},
						{
							"dataset": {
								"referenceName": "CreateTurasDimsLookup",
								"type": "DatasetReference"
							},
							"name": "LookupType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "IntermediateTermTable",
								"type": "DatasetReference"
							},
							"name": "SinkIntoTermTaxonomy"
						},
						{
							"dataset": {
								"referenceName": "IntermediateTermTable",
								"type": "DatasetReference"
							},
							"name": "DeleteTerm"
						},
						{
							"dataset": {
								"referenceName": "IntermediateTermTable",
								"type": "DatasetReference"
							},
							"name": "UpdateSink"
						}
					],
					"script": "\n\nsource(output(\n\t\tDimTableName as string,\n\t\tDimID as long,\n\t\tDimCode as string,\n\t\tDimName as string,\n\t\tDimDescription as string,\n\t\tDimActive as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TurasDimensionTables\nsource(output(\n\t\tTermDimTable as string,\n\t\tTermID as integer,\n\t\tTermDimID as long,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tTermDescription as string,\n\t\tTermPreferred as boolean,\n\t\tTermAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TaxonomyDimensionTerms\nsource(output(\n\t\tTermTypeID as integer,\n\t\tDimTable as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LookupType\nTurasDimensionTables, TaxonomyDimensionTerms join(DimID == TermDimID\n\t&& DimTableName == TermDimTable,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> MergeJoin\nMergeJoin split(isNull(TermID),\n\tisNull(DimID),\n\tdisjoint: true) ~> ConditionalSplit@(Insert, Delete, Update)\nConditionalSplit@Insert derive(Preferred = true()) ~> DerivedColumn\nDerivedColumn, LookupType lookup(DimTableName == DimTable,\n\tbroadcast: 'none')~> Lookup1\nLookup1 select(mapColumn(\n\t\tDimID,\n\t\tDimCode,\n\t\tDimName,\n\t\tDimDescription,\n\t\tDimActive,\n\t\tTermID,\n\t\tPreferred,\n\t\tDimTermTypeID = LookupType@TermTypeID\n\t)) ~> SelectForInsertion\nConditionalSplit@Delete select(mapColumn(\n\t\tDimID,\n\t\tTermID,\n\t\tTermCode,\n\t\tTermName\n\t)) ~> SelectForDeletion\nSelectForDeletion alterRow(deleteIf(isNull(DimID))) ~> MarkForDeletion\nFilter1 select(mapColumn(\n\t\tDimID,\n\t\tTermID,\n\t\tTermCode,\n\t\tTermName,\n\t\tTermDescription,\n\t\tTermPreferred,\n\t\tTermAvailable,\n\t\tTermTypeID\n\t)) ~> SelectForUpdate\nSelectForUpdate alterRow(updateIf(not(isNull(TermID)))) ~> MarkForUpdate\nSelectForInsertion alterRow(insertIf(not(isNull(DimTermTypeID)))) ~> AlterRow1\nAlterRow1 filter(not(isNull(DimTermTypeID))) ~> RemoveNullTermTypeID\nConditionalSplit@Update derive(DimName = iif(isNull(DimName), ' ', DimName),\n\t\tTermName = iif(isNull(TermName), ' ', TermName),\n\t\tTermDescription = iif(isNull(TermDescription), ' ', TermDescription),\n\t\tDimDescription = iif(isNull(DimDescription), ' ', DimDescription),\n\t\tDimActive = iif(isNull(DimActive), true(), DimActive),\n\t\tTermAvailable = iif(isNull(TermAvailable), true(), TermAvailable),\n\t\tDimCode = iif(isNull(DimCode), ' ', DimCode),\n\t\tTermCode = iif(isNull(TermCode), ' ', TermCode)) ~> ReplaceNulls\nReplaceNulls filter(not((DimName == TermName) && (TermDescription == DimDescription) && (DimActive == TermAvailable) && (DimCode == TermCode))) ~> Filter1\nRemoveNullTermTypeID sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tDimID,\n\t\tTermCode = DimCode,\n\t\tTermName = DimName,\n\t\tDescription = DimDescription,\n\t\tPreferred,\n\t\tAvailable = DimActive,\n\t\tTermTypeID = DimTermTypeID\n\t)) ~> SinkIntoTermTaxonomy\nMarkForDeletion sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['TermID']) ~> DeleteTerm\nMarkForUpdate sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermID'],\n\tmapColumn(\n\t\tTermID,\n\t\tTermCode,\n\t\tTermName,\n\t\tDescription = TermDescription,\n\t\tAvailable = TermAvailable,\n\t\tDimID,\n\t\tPreferred = TermPreferred,\n\t\tTermTypeID\n\t)) ~> UpdateSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TaxonomyDimensionTerms')]",
				"[concat(variables('factoryId'), '/datasets/IntermediateTermTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PortThesaurusTerms')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PortThesaurusTerms"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ADFTestingTermTable",
								"type": "DatasetReference"
							},
							"name": "GetThesaurusTypes"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTermTypes",
								"type": "DatasetReference"
							},
							"name": "GetTaxonomyTermTypes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TermTypeSink",
								"type": "DatasetReference"
							},
							"name": "InsertSink"
						},
						{
							"dataset": {
								"referenceName": "TermTypeSink",
								"type": "DatasetReference"
							},
							"name": "UpdateSink"
						},
						{
							"dataset": {
								"referenceName": "TermTypeSink",
								"type": "DatasetReference"
							},
							"name": "DeleteSink"
						},
						{
							"dataset": {
								"referenceName": "TermSINK",
								"type": "DatasetReference"
							},
							"name": "MarkTermsOfThisTypeAlsoUnavailable"
						}
					],
					"script": "\n\nsource(output(\n\t\tDimID as integer,\n\t\tDimName as string,\n\t\tDimDescription as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> GetThesaurusTypes\nsource(output(\n\t\tTermTypeID as integer,\n\t\tTypeName as string,\n\t\tTypeDescription as string,\n\t\tTypeAvailable as boolean,\n\t\tTypeSourceID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> GetTaxonomyTermTypes\nGetThesaurusTypes, GetTaxonomyTermTypes join(DimID == TermTypeID,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> MergeJoin\nMergeJoin split(isNull(TermTypeID),\n\tisNull(DimID),\n\tleft(DimName, 80) == TypeName && (iif(isNull(left(DimDescription, 500)), '', 'DimDescription') == iif(isNull(TypeDescription), '', TypeDescription)),\n\tdisjoint: true) ~> ConditionalSplit1@(insert, delete, DoNothingOnMatch, update)\nConditionalSplit1@insert derive(DimAvailable = true(),\n\t\tDimSourceID = 2,\n\t\tDimTypeName = left(DimName, 80),\n\t\tDimTypeDescription = left(DimDescription, 500)) ~> ConvertDimToType\nConvertDimToType select(mapColumn(\n\t\tTermTypeID = DimID,\n\t\tTypeName = DimTypeName,\n\t\tTypeDescription = DimTypeDescription,\n\t\tTypeAvailable = DimAvailable,\n\t\tDimSourceID\n\t)) ~> SelectColumnsToInsert\nFilter1 derive(DimTypeName = left(DimName, 80),\n\t\tDimTypeDescription = left(DimDescription, 500)) ~> ConvertNameAndDesc\nConditionForUpdate select(mapColumn(\n\t\tTermTypeID,\n\t\tDimName = DimTypeName,\n\t\tDimDescription = DimTypeDescription,\n\t\tAvailable = TypeAvailable,\n\t\tSourceID = TypeSourceID\n\t)) ~> SelectForUpdate\nConvertNameAndDesc alterRow(updateIf(not(isNull(TermTypeID)))) ~> ConditionForUpdate\nConditionalSplit1@delete alterRow(updateIf(not(isNull(TermTypeID)))) ~> ConditionForDelete\nSelectValueToModify select(mapColumn(\n\t\tTermTypeID,\n\t\tTypeName,\n\t\tTypeAvailable,\n\t\tTypeSourceID,\n\t\tDescription = TypeDescription\n\t)) ~> TermTypeSoftDelete\nRemoveNullTermTypeID derive(TypeAvailable = TypeAvailable == false()) ~> SelectValueToModify\nSelectValueToModify select(mapColumn(\n\t\tTermTypeID,\n\t\tTypeName,\n\t\tTypeDescription,\n\t\tTypeAvailable\n\t)) ~> SoftDeleteTermTable\nSelectColumnsToInsert alterRow(insertIf(not(isNull(TermTypeID)))) ~> AssignForInsertion\nConditionForDelete filter(not(isNull(TermTypeID))) ~> RemoveNullTermTypeID\nConditionalSplit1@update derive(DimDescription = iif(isNull(DimDescription), ' ', DimDescription),\n\t\tTypeDescription = iif(isNull(TypeDescription), ' ', TypeDescription)) ~> ReplaceNullsWithSpace\nReplaceNullsWithSpace filter(not(left(DimName, 80) == TypeName && (left(DimDescription, 500) == TypeDescription))&& !isNull(DimID) && not(isNull(TermTypeID))) ~> Filter1\nAssignForInsertion sink(input(\n\t\tTermTypeID as integer,\n\t\tTypeName as string,\n\t\tDescription as string,\n\t\tAvailable as boolean,\n\t\tDimTable as string,\n\t\tSourceID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['TermTypeID'],\n\tmapColumn(\n\t\tTermTypeID,\n\t\tTypeName,\n\t\tDescription = TypeDescription,\n\t\tAvailable = TypeAvailable,\n\t\tSourceID = DimSourceID\n\t)) ~> InsertSink\nSelectForUpdate sink(input(\n\t\tTermTypeID as integer,\n\t\tTypeName as string,\n\t\tDescription as string,\n\t\tAvailable as boolean,\n\t\tDimTable as string,\n\t\tSourceID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermTypeID'],\n\tmapColumn(\n\t\tTermTypeID,\n\t\tTypeName = DimName,\n\t\tDescription = DimDescription,\n\t\tAvailable,\n\t\tSourceID\n\t),\n\tdateFormat:'dd/MM/yyyy') ~> UpdateSink\nTermTypeSoftDelete sink(input(\n\t\tTermTypeID as integer,\n\t\tTypeName as string,\n\t\tDescription as string,\n\t\tAvailable as boolean,\n\t\tDimTable as string,\n\t\tSourceID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermTypeID'],\n\tmapColumn(\n\t\tTermTypeID,\n\t\tTypeName,\n\t\tDescription,\n\t\tAvailable = TypeAvailable,\n\t\tSourceID = TypeSourceID\n\t)) ~> DeleteSink\nSoftDeleteTermTable sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TermTypeID'],\n\tmapColumn(\n\t\tTermTypeID,\n\t\tTermName = TypeName,\n\t\tDescription = TypeDescription,\n\t\tAvailable = TypeAvailable\n\t)) ~> MarkTermsOfThisTypeAlsoUnavailable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ADFTestingTermTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/insertBranchTesting')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "MergePortfolioDims"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "PortfolioDimensionTables",
								"type": "DatasetReference"
							},
							"name": "PortfolioDimensionTables"
						},
						{
							"dataset": {
								"referenceName": "TaxonomyDimensionTerms",
								"type": "DatasetReference"
							},
							"name": "TaxonomyDimensionTerms"
						},
						{
							"dataset": {
								"referenceName": "CreateTurasDimsLookup",
								"type": "DatasetReference"
							},
							"name": "LookupType"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "IntermediateTermTable",
								"type": "DatasetReference"
							},
							"name": "SinkIntoTermTaxonomy"
						}
					],
					"script": "\n\nsource(output(\n\t\tDimTableName as string,\n\t\tDimID as integer,\n\t\tDimCode as string,\n\t\tDimName as string,\n\t\tDimDescription as string,\n\t\tDimActive as boolean\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> PortfolioDimensionTables\nsource(output(\n\t\tTermDimTable as string,\n\t\tTermID as integer,\n\t\tTermDimID as long,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tTermDescription as string,\n\t\tTermPreferred as boolean,\n\t\tTermAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> TaxonomyDimensionTerms\nsource(output(\n\t\tTermTypeID as integer,\n\t\tDimTable as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LookupType\nPortfolioDimensionTables, TaxonomyDimensionTerms join(DimID == TermDimID\n\t&& DimTableName == TermDimTable,\n\tjoinType:'outer',\n\tbroadcast: 'none')~> MergeJoin\nConditionalSplit1@Insert derive(Preferred = true()) ~> AddPreferredColumn\nAddPreferredColumn, LookupType lookup(DimTableName == DimTable,\n\tbroadcast: 'none')~> Lookup1\nLookup1 select(mapColumn(\n\t\tDimID,\n\t\tDimCode,\n\t\tDimName,\n\t\tDimDescription,\n\t\tDimActive,\n\t\tTermID,\n\t\tPreferred,\n\t\tTermTypeID_LookUp = LookupType@TermTypeID\n\t)) ~> SelectForInsertion\nSelectForInsertion alterRow(insertIf(not(isNull(TermTypeID_LookUp)))) ~> AlterRow1\nAlterRow1 filter(not(isNull(TermTypeID_LookUp))) ~> Filter2\nMergeJoin split(isNull(TermID),\n\tdisjoint: false) ~> ConditionalSplit1@(Insert, Default)\nFilter2 sink(input(\n\t\tTermID as integer,\n\t\tDimID as integer,\n\t\tTermCode as string,\n\t\tTermName as string,\n\t\tDescription as string,\n\t\tPreferred as boolean,\n\t\tAvailable as boolean,\n\t\tTermTypeID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tmapColumn(\n\t\tDimID,\n\t\tTermCode = DimCode,\n\t\tTermName = DimName,\n\t\tDescription = DimDescription,\n\t\tPreferred,\n\t\tAvailable = DimActive,\n\t\tTermTypeID = TermTypeID_LookUp\n\t)) ~> SinkIntoTermTaxonomy"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TaxonomyDimensionTerms')]",
				"[concat(variables('factoryId'), '/datasets/IntermediateTermTable')]"
			]
		}
	]
}